// ##################
// Headers
// ##################

#platform "Gen4-uLCD-70DT"
#inherit "4DGL_16bitColours.fnc"
#inherit "VisualConst.inc"
#inherit "GENESISConst.inc"

// ##################
// Constants
// ##################

// Generic
#constant BTN_UP        0
#constant BTN_DOWN      1
#constant ACTIVE        1
#constant INACTIVE      0
#constant TRUE          1
#constant FALSE         0
#constant OFFLINE       1
#constant ONLINE        0
#constant START_BYT     0x18
#constant BUF_SIZE      256
#constant BAUD          20000

// Colors
#constant BACKGROUND_COLOR  0xDF5F
#constant LED_GOOD          LIMEGREEN
#constant LED_IDLE          0x34DF
#constant LED_BAD           RED
#constant RB_CHKD           BLACK
#constant RB_UNCHKD         0xD699

// Forms
#constant OVERVIEW_FORM 0
#constant SHELF_FORM 1
#constant MOD_FORM 2

// Indices
#constant TYPE  2
#constant ID    3
#constant MOD_V 4
#constant MOD_T 6
#constant MOD_A 7

// TODO: Add indices to indexers
#constant SHELF_V
#constant SHELF_T
#constant SHELF_H
#constant SHELF_L
#constant SHELF_ID
#constant SHELF_A
#constant SHELF_E

// ##################
// Structures
// ##################

// System has 12 major characteristics
// 1) System Status, Int: 1 Byte
// 2) System Mode, Int: 1 Byte
// 3) Relay Status, Int: 1 Byte
// 4) # of Discharges, Int: 1 Byte
// 5) Stored Energy, Float: 2 Bytes
// 6) Time at Max, Float: 2 Bytes
// 7) Estimated Runtime, Float: 2 Bytes
// 8) Bus Voltage, Float: 2 Bytes
// 9) Output Current, Float: 2 Bytes
// 10) Capacitors' Voltage, Float: 2 Bytes
var system[16];

// Shelves have 9 major characteristics
// 1) Total Voltage, Float: 2 Bytes
// 2) Avg. Temp, Int: 1 Byte
// 3) Highest Temp, Float: 1 Byte
// 4) Lowest Temp, Float: 1 Bytes
// 5) ID Highest/Lowest Temp, Int: 1 Byte
// 6) Alarm/Error, Int : 1 Byte
// 7) Error ID, Int: 1 Byte
// 8) X Position,  Int: 1 Byte
// 9) Y Position,  Int: 1 Byte
// 10) Good Button handle, Ptr: 1 Byte
// 11) Bad Button handle, Ptr: 1 Byte
var shelf0[13];
var *shelf_ptr;
var shelf_volt[2];
var shelf_temp[2];

// Modules have 7 major characteristics
// 1) Voltage, Float: 2 Bytes
// 2) Temperature, Int: 1 Byte
// 3) Alarm/Error, Int: 1 Byte
// 4) X Position,  Int: 1 Byte
// 5) Y Position,  Int: 1 Byte
// 6) Good Button handle, Ptr: 1 Byte
// 7) Bad Button handle, Ptr: 1 Byte
var mod0[8];
var mod1[8];
var mod2[8];
var mod3[8];
var mod4[8];
var mod5[8];
var mod6[8];
var mod7[8];
var mod8[8];
var mods[9] := [mod0, mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8];
var *mod_ptr_1;
var *mod_ptr_2;
var mod_volt[2];
var mod_temp[2];

// ##################
// Variables
// ##################

// Initialize to the overview screen
var current_form := OVERVIEW_FORM;
var current_mod := 0;
var num_discharges := 0;
var rx_buffer[BUF_SIZE];

// ##################
// Main
// ##################

func main()

  // Mount the drive
  putstr("Mounting...\n");
  if (!(file_Mount()))
    while(!(file_Mount()))
      putstr("Drive not mounted...");
      pause(200);
      gfx_Cls();
      pause(200);
    wend
  endif

  // Get file handle
  hndl := file_LoadImageControl("GENESIS.dat", "GENESIS.gci", 1);
  
  // Basic initialization stuff
  gfx_Set(SCREEN_MODE, LANDSCAPE);
  touch_Set(TOUCH_ENABLE);
  setup_comms();

  // Draw the logo screen then the overall screen
  // draw_logo_screen();
  pause(1500);
  // draw_overall_form();

  // Enter the forever loop
  repeat

    // Send Commands
    if(current_form == SHELF_FORM || current_form == MOD_FORM)

      var current_shelf := 0;
      request_all_shelf_mods(current_shelf);

    endif
    // Read Commands
    // process_input();

    // Update the view

    // Check for user input
    // check_press();

    // React to user input

  forever

endfunc

// ##################
// Math
// ##################

// Prints the system voltage
// Sums the voltage from each shelf
func print_system_voltage(var x_pos, var y_pos)

    var sys_volt[2];
    
    sys_volt := calc_system_voltage();
    
    gfx_MoveTo(x_pos, y_pos);
    flt_PRINT(sys_volt, "%-.0f");

endfunc

// Calculates the system voltage
// By summing up each shelf's voltage
func calc_system_voltage()

    var sys_volt[2];
    
    // Init the system voltage
    flt_VAL(sys_volt, "0.0");

    // Sum the voltages
    var i;
    for(i := 0; i < 3; i++)

        calc_shelf_voltage(i);

        // Add current shelf voltage to system voltage
        flt_ADD(sys_volt, sys_volt, shelf_volt); 
    next

    return sys_volt;

endfunc

// Prints off the voltage given a 16 bit int
func print_shelf_voltage(var shelf, var x_pos, var y_pos)

    // Setting up float arrays
    var volt_flt[2];

    calc_shelf_voltage(shelf);

    // Print it at desired location
    gfx_MoveTo(x_pos, y_pos);
    flt_PRINT(volt_flt, "%-.0f");

endfunc

// Calculates the voltage given a 16 bit int for a shelf
func calc_shelf_voltage(var shelf)

    get_shelf(shelf);
    
    var volt_int;
    volt_int := shelf_ptr[0];

    // Setting up float arrays
    var volt_flt[2], temp_flt[2];
    
    // Convert to float
    flt_ITOF(volt_flt, volt_int);

    // Create multiplication factor
    flt_VAL(temp_flt, "0.02");
    
    // (voltage = [0xUpperByte,0xLowerByte] * 0.02)
    flt_MUL(shelf_volt, volt_flt, temp_flt);

endfunc

// Calculates the voltage given a 16 bit int for a mod
func calc_mod_voltage(var volt_int)

    // Setting up float arrays
    var volt_flt[2], temp_flt[2];
    
    // Convert to float
    flt_ITOF(volt_flt, volt_int);

    // Create multiplication factor
    flt_VAL(temp_flt, "0.02");
    
    // (voltage = [0xUpperByte,0xLowerByte] * 0.02)
    flt_MUL(volt_mod, volt_flt, temp_flt);

endfunc

// Prints off the temperature given a 8+ bit int
func print_temperature(var temp_int, var x_pos, var y_pos)

    var temp_flt[2];

    temp_flt := calc_temperature(temp_int);

    gfx_MoveTo(x_pos, y_pos);
    flt_PRINT(temp_flt, "%-.0f");

endfunc

// Calculates the temperature given an 8+ bit int
func calc_temperature(var temp_int)

    var temp_flt_1[2], temp_flt_2[2];

    // Get the temperature
    flt_VAL(temp_flt_1, "0.5");
    flt_ITOF(temp_flt_2, temp_int);
    flt_MUL(temp_flt_1, temp_flt_1, temp_flt_2);

    return temp_flt_1;

endfunc

// ##################
// Get/Set
// ##################

// Basic Shelf Get/Set
// Sets the global shelf_ptr to 'shelf'
func get_shelf(var shelf)

    shelf_ptr := shelf0;

endfunc

// Updates the shelf_ptr shelf's info
func set_shelf(var data)

    shelf_ptr[0] := data[SHELF_V];
    shelf_ptr[1] := data[SHELF_V + 1];
    shelf_ptr[2] := data[SHELF_T];
    shelf_ptr[3] := data[SHELF_H];
    shelf_ptr[4] := data[SHELF_L];
    shelf_ptr[5] := data[SHELF_ID];
    shelf_ptr[6] := data[SHELF_A];
    shelf_ptr[7] := data[SHELF_E];

endfunc

// Basic Mod Get/Set
// Sets the global mod_ptr_1 to 'even' mod (0, 2, 4, ...)
// Sets the global mod_ptr_2 to 'odd' mod (1, 3, 5, ...)
func get_mods(var shelf, var mod)

    var mods_per_shelf := 12;
    mod_ptr_1 := mods[mod + (shelf * mods_per_shelf)];
    mod_ptr_2 := mods[mod + (shelf * mods_per_shelf) + 1];

endfunc

// Updates the mod_ptr_1 & mod_ptr_2 mods' infos
func set_mods(var data)
    
    // Get the voltage
    mod_ptr_1[0] := data[MOD_V];
    mod_ptr_1[1] := data[MOD_V + 1];
    mod_ptr_2[0] := data[MOD_V + 4];
    mod_ptr_2[1] := data[MOD_V + 4 + 1];
    
    // Get the temperature
    mod_ptr_1[2] := data[MOD_T];
    mod_ptr_2[2] := data[MOD_T + 4];
    
    // Get the Alarm/Error
    mod_ptr_1[3] := data[MOD_A];
    mod_ptr_2[3] := data[MOD_A + 4];
endfunc

// ##################
// Input/Output
// ##################

// === Initialize ===

func setup_comms()

    com1_Init(rx_buffer, BUF_SIZE, 0);
    com_SetBaud(COM1, BAUD);
    COM1_TX_pin(PA4);
    COM1_RX_pin(PA5);

endfunc

// === Input ===

// Handles input messages
func process_input()

    var tmpByte;
    var dataByteCount := 0x0F;
    var temp_vals[15];
    var shelf_number;
    var mod_number;
    var i;

    if(com1_Count() > dataByteCount)
        
        // Read in the first byte
        // Should be START BYTE (0xAA)
        tmpByte := serin1();

        // Looking for the start of a message so...
        // While tmpByte isn't the Start Byte
        while(tmpByte != START_BYT)

            // If there isn't enough data
            // in the buffer for a full message
            if(com1_Count() < dataByteCount)
                return; // Leave function
            endif

            // Read in the next byte
            tmpByte := serin1();

        wend

        // Give it  5msec to breath
        pause(5);

        // Read in vals from buffer into temp array
        for(i := 0; i < dataByteCount; i++)
            temp_vals[i] := serin1();
        next
        
        // If it's a shelf update message
        if(temp_vals[TYPE] == 0xA0)
            
            // See who the message is for
            shelf_number := temp_vals[ID];

            // Get their attention
            get_shelf(shelf_number);

            // Update their info
            set_shelf(temp_vals);
        endif

        // If it's a mod update message
        if((temp_vals[TYPE] & 0xB0) == 0xB0)
            
            // See who the message is for
            shelf_number := temp_vals[ID];
            mod_number := ((temp_vals[TYPE] | 0xF0) & 0x0F);
            
            // Get their attention
            get_mods(shelf_number, mod_number);
            
            // Update their info
            set_mods(temp_vals);          
        endif
    endif
endfunc

// === Output ===

// Requests the basic module info
// Sends out the "B#" command
func request_mod(var shelf, var mod)

    var cmd[7];
    cmd[0] := 0x18;
    cmd[1] := 0xEA;
    cmd[2] := shelf;
    cmd[3] := 0x0F;
    cmd[4] := (0xB0) + (mod/2);
    cmd[5] := 0xFF;
    cmd[6] := 0x00;

    var i;
    for(i := 0; i < 7; i++)
        serout1(cmd[i]);
    next

endfunc

// Sends a request for all the mods on the current shelf
func request_all_shelf_mods(var shelf)

    var mods_per_shelf := 9;

    var i;
    for(i := 0; i < mods_per_shelf; i += 2)
        // Send request for each mod on current shelf
        request_mod(shelf, i);
        // pause(5);
    next
endfunc

func check_press()

  var touch_state;
  touch_state := touch_Get(TOUCH_STATUS);

  if(touch_state == TOUCH_RELEASED)
    
    // Get the touched image and location
    var touched_image, x_touch, y_touch;
    touched_image := img_Touched(hndl, -1);
    x_touch := touch_Get(TOUCH_GETX);
    y_touch := touch_Get(TOUCH_GETY);

    // If we are looking at the overview screen
    if(current_form == OVERVIEW_FORM)

      var mode_index, off, idle, voltage, power;
      mode_index := 1;
      off := 0;
      idle := 1;
      voltage := 2;
      power := 3;

      if(touched_image == iShelf_btn)
        current_form := SHELF_FORM;
        current_mod := 0;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      // Radio Buttons for System Mode

      // Off
      if((x_touch > 25 - 10) && (x_touch < 25 + 10) && (y_touch > 215 - 10) && (y_touch < 215 + 10))
        if(system[mode_index] != off)
          system[mode_index] := off;
          draw_system_mode_radios();
        endif
      endif

      // Idle
      if((x_touch > 25 - 10) && (x_touch < 25 + 10) && (y_touch > 250 - 10) && (y_touch < 250 + 10))
        if(system[mode_index] != idle)
          system[mode_index] := idle;
          draw_system_mode_radios();
        endif
      endif

      // Voltage
      if((x_touch > 100 - 10) && (x_touch < 100 + 10) && (y_touch > 215 - 10) && (y_touch < 215 + 10))
        if(system[mode_index] != voltage)
          system[mode_index] := voltage;
          draw_system_mode_radios();
        endif
      endif

      // Voltage
      if((x_touch > 100 - 10) && (x_touch < 100 + 10) && (y_touch > 250 - 10) && (y_touch < 250 + 10))
        if(system[mode_index] != power)
          system[mode_index] := power;
          draw_system_mode_radios();
        endif
      endif

      // Reset Number of Discharges
      if(touched_image == iResetDischarges_btn)
        num_discharges := 0;
        draw_num_discharges();
      endif

      // Individual Module Buttons

      if(touched_image == iMainModule1Good_btn || touched_image == iMainModule1Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 0;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule2Good_btn || touched_image == iMainModule2Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 1;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule3Good_btn || touched_image == iMainModule3Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 2;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule4Good_btn || touched_image == iMainModule4Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 3;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule5Good_btn || touched_image == iMainModule5Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 4;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule6Good_btn || touched_image == iMainModule6Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 5;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule7Good_btn || touched_image == iMainModule7Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 6;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule8Good_btn || touched_image == iMainModule8Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 7;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

      if(touched_image == iMainModule9Good_btn || touched_image == iMainModule9Bad_btn)
        current_form := SHELF_FORM;
        current_mod := 8;
        disable_all_inputs();
        draw_shelf_form(current_mod);
      endif

    endif

    // If we are looking at the shelf form
    if(current_form == SHELF_FORM)

      if(touched_image == iShelfToMain_btn)
        current_form := OVERVIEW_FORM;
        disable_all_inputs();
        draw_overall_form();
      endif

      // Individual Module Buttons

      if(touched_image == iModule1Good_btn || touched_image == iModule1Bad_btn)
        current_mod := 0;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule2Good_btn || touched_image == iModule2Bad_btn)
        current_mod := 1;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule3Good_btn || touched_image == iModule3Bad_btn)
        current_mod := 2;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule4Good_btn || touched_image == iModule4Bad_btn)
        current_mod := 3;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule5Good_btn || touched_image == iModule5Bad_btn)
        current_mod := 4;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule6Good_btn || touched_image == iModule6Bad_btn)
        current_mod := 5;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule7Good_btn || touched_image == iModule7Bad_btn)
        current_mod := 6;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule8Good_btn || touched_image == iModule8Bad_btn)
        current_mod := 7;
        update_shelf_mod(current_mod);
      endif

      if(touched_image == iModule9Good_btn || touched_image == iModule9Bad_btn)
        current_mod := 8;
        update_shelf_mod(current_mod);
      endif

    endif

  endif

endfunc

func disable_all_inputs()

  img_SetAttributes(hndl, -1, I_TOUCH_DISABLE);

endfunc

